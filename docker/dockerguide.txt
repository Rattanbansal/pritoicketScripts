Key Features of YAML:

    Readable: Easy to understand.
    Hierarchical: Uses indentation to show structure.
    Flexible: Allows lists, dictionaries, and scalars.

üìù Basic YAML Syntax

    Key-Value Pairs:

name: nginx
replicas: 3

Nested Values: Use spaces (not tabs) to show hierarchy.

metadata:
  name: nginx-app

Lists: Use a dash (-) for items in a list.

containers:
  - name: nginx
    image: nginx:latest


üõ†Ô∏è Understanding Kubernetes YAML Files from Scratch

If you're new to Kubernetes and YAML, let's start with the basics and build a strong foundation. By the end of this explanation, you'll understand:

    What YAML is and why it‚Äôs used in Kubernetes.
    How to write a simple YAML file for Kubernetes resources.
    Different resource types in Kubernetes (like Deployments, Services, Pods).
    Practical examples to help you learn step by step.

üìö What is YAML?

YAML stands for YAML Ain't Markup Language. It‚Äôs a simple, human-readable format used to configure systems. Kubernetes uses YAML files to define how applications and resources should behave.
Key Features of YAML:

    Readable: Easy to understand.
    Hierarchical: Uses indentation to show structure.
    Flexible: Allows lists, dictionaries, and scalars.

üìù Basic YAML Syntax

    Key-Value Pairs:

name: nginx
replicas: 3

Nested Values: Use spaces (not tabs) to show hierarchy.

metadata:
  name: nginx-app

Lists: Use a dash (-) for items in a list.

    containers:
      - name: nginx
        image: nginx:latest

üìã Why YAML is Important in Kubernetes

Kubernetes uses YAML files to describe the desired state of your system. You tell Kubernetes what you want (e.g., deploy 3 replicas of a web app), and Kubernetes ensures it happens.

Here‚Äôs why YAML is essential:

    Declarative Configuration: Focus on what you want, not how it‚Äôs done.
    Reusable: Share or version-control YAML files for consistency.
    Automatable: Tools like kubectl and CI/CD pipelines can apply YAML files.

-------------

üõ†Ô∏è Kubernetes Resource Types in YAML

In Kubernetes, different resources serve different purposes. Let's explore them one by one.
1Ô∏è‚É£ Pod

A Pod is the smallest deployable unit in Kubernetes. It contains one or more containers.
Pod YAML Example:

apiVersion: v1                 # Kubernetes API version
kind: Pod                      # Resource type
metadata:                      # Metadata about the pod
  name: my-pod                 # Name of the pod
spec:                          # Specification of the pod
  containers:                  # List of containers in this pod
    - name: nginx-container    # Name of the container
      image: nginx:latest      # Container image
      ports:
        - containerPort: 80    # Port exposed by the container

-----

2Ô∏è‚É£ Deployment

A Deployment manages a group of pods, ensuring they are always running and up-to-date. It also supports scaling and updates.
Deployment YAML Example:

apiVersion: apps/v1            # API version for Deployment
kind: Deployment               # Resource type
metadata:
  name: nginx-deployment       # Name of the deployment
spec:
  replicas: 3                  # Number of pods to create
  selector:                    # Select pods based on labels
    matchLabels:
      app: nginx
  template:                    # Template for creating pods
    metadata:
      labels:
        app: nginx             # Label applied to pods
    spec:
      containers:
        - name: nginx
          image: nginx:latest  # Container image
          ports:
            - containerPort: 80

-----------

3Ô∏è‚É£ Service

A Service exposes pods to the network. It provides a stable IP address and DNS name to access your application.
Service YAML Example:

apiVersion: v1                 # API version for Service
kind: Service                  # Resource type
metadata:
  name: nginx-service          # Name of the service
spec:
  selector:                    # Match pods with this label
    app: nginx
  type: NodePort               # Type of service (external access)
  ports:
    - protocol: TCP
      port: 80                 # Port exposed by the service
      targetPort: 80           # Port used by the pod's container
